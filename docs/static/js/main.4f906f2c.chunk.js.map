{"version":3,"sources":["Utils/constants/index.ts","Utils/helpers/index.ts","Services/Socket.ts","Redux-Manager/actions/puzzleActions.ts","Redux-Manager/reducers/puzzleReducer.ts","Redux-Manager/reducers/index.ts","Components/layout/footer/Footer.tsx","Components/layout/header/Header.tsx","Components/layout/Layout.tsx","Components/pages/welcome/Welcome.tsx","Components/pages/game/partials/Loading.tsx","Components/pages/game/partials/Error.tsx","Components/pages/game/partials/GameOver.tsx","Utils/enumerations/index.ts","Components/pages/game/partials/Actions.tsx","Components/pages/game/partials/NextLevel.tsx","Components/pages/game/partials/PuzzleCell.tsx","Components/pages/game/partials/PuzzleRow.tsx","Components/pages/game/partials/PuzzleBody.tsx","Components/pages/game/Game.tsx","App.tsx","index.tsx"],"names":["constants","defaultWebSocketUrl","requestHelp","requestNew","requestMap","requestRotate","requestVerify","responseNewSuccess","responseRotateSuccess","responseMapSuccess","responseVerifyIsCorrect","responsePassword","responseGameOver","remainingVerifyAttemptCount","maxLevel","levelPassword1","levelPassword2","levelPassword3","levelPassword4","levelPassword5","levelPassword6","messages","title","levelPrefix","check","giveUp","return","nextLevel","loading","connectionError","remainingVerifyAttemptText","achievemessage","gameOverMessage","gameFinishedMessage","welcomeTitle","welcomeDescription","copyright","level_1","level_2","level_3","level_4","level_5","level_6","createPuzzleDataFromMessage","message","replace","trim","split","map","x","getStorageItem","key","window","localStorage","getItem","Socket","webSocketUrl","_webSocketUrl","onOpenConnectionAsync","webSocket","Promise","resolve","onopen","onerror","onRecieveMessageAsync","onmessage","event","data","onCloseConnectionAsync","onclose","readyState","createNewPuzzle","puzzleLevel","WebSocket","Error","send","newResponse","startsWith","mapResponse","puzzleData","puzzleDataDimension","length","rotatePuzzleCellAsync","cellX","cellY","response","rotateIsMap","verifyPuzzleAsync","isVerified","isCorrect","isGameOver","levelPassword","password","pop","value","setItem","goToNextLevelAsync","nextAvailableLevel","closeWebSocketAsync","close","this","instance","rdxActionTypes","puzzleStarted","createAction","puzzleReturned","puzzleLoading","puzzleFailed","puzzleCreated","payload","puzzleUpdated","puzzleGameOver","puzzleDecreaseValidationAttempt","puzzleNextLevelAvailability","puzzleNextLevelCreated","rdxReturnToWelcomeAsync","dispatch","puzzleInitialState","puzzleIsWelcome","puzzleLevelPassword","puzzleIsStarted","puzzleIsOver","puzzleIsLoading","puzzleIsError","puzzleWebSocket","undefined","puzzleRemainingValidationAttempt","puzzleIsNextLevelAvailable","appReducers","puzzleReducer","createReducer","builder","addCase","state","action","Footer","className","Date","getFullYear","Header","width","height","viewBox","xmlns","fill","d","Layout","children","Welcome","useDispatch","Object","entries","localKeyIndex","localKeyValue","prevLevelHasAchieved","levelCanPlay","levelDescription","some","item","type","onClick","buttonStartHandler","src","process","GameLoading","GameError","useSelector","GameOver","EWebSocketReadyState","mapWebSocketReadyState","Map","CONNECTING","OPEN","CLOSING","CLOSED","GameActions","enumeration","validation","rdxValidateExistingPuzzleAsync","get","GameNextLevel","rdxgoToNextLevelAsync","PuzzleCell","props","id","rowIndex","cellIndex","PuzzleRow","cells","push","style","PuzzleBody","useState","stateBounceClassName","setStateBounceClassName","useEffect","toggleClassDelay","setTimeout","clearTimeout","buttonRotateHandler","target","rdxrotatePuzzleCellAsync","rowRenderer","index","rowCount","rowHeight","Game","useLayoutEffect","rdxCreateWebSocketAndPuzzleAsync","App","PipesPuzzleGameApp","store","configureStore","reducer","devTools","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredPaths","StrictMode","pipePuzzleRootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.4f906f2c.chunk.js","sourcesContent":["interface IConstants {\n  api: {\n    defaultWebSocketUrl: string;\n    requestHelp: string;\n    requestNew: string;\n    requestMap: string;\n    requestRotate: string;\n    requestVerify: string;\n    responseNewSuccess: string;\n    responseRotateSuccess: string;\n    responseMapSuccess: string;\n    responseVerifyIsCorrect: string;\n    responsePassword: string;\n    responseGameOver: string;\n    remainingVerifyAttemptCount: number;\n    maxLevel: number;\n  };\n  localStorageKeyPrefix: string;\n  localStorageKeys: {\n    levelPassword1: string;\n    levelPassword2: string;\n    levelPassword3: string;\n    levelPassword4: string;\n    levelPassword5: string;\n    levelPassword6: string;\n  };\n}\n\nconst constants: IConstants = {\n  api: {\n    defaultWebSocketUrl: 'wss://hometask.eg1236.com/game-pipes/',\n    requestHelp: 'help', // help - lists other commands\n    requestNew: 'new', // new <l> - chooses the game level, <1|6>\n    requestMap: 'map', // map - returns the current map\n    requestRotate: 'rotate', // rotate <x> <y> - rotates the tile at coordinates\n    requestVerify: 'verify', // verify - verifies if the current solution is a valid one (if yes, it will return a level password).\n    responseNewSuccess: 'new: OK',\n    responseRotateSuccess: 'rotate: OK',\n    responseMapSuccess: 'map:',\n    responseVerifyIsCorrect: 'verify: Correct!',\n    responsePassword: 'Password:',\n    responseGameOver: 'verify: Only 10',\n    remainingVerifyAttemptCount: 12,\n    maxLevel: 6,\n  },\n  localStorageKeyPrefix: 'puzzle-password-level_',\n  localStorageKeys: {\n    levelPassword1: 'puzzle-password-level_1',\n    levelPassword2: 'puzzle-password-level_2',\n    levelPassword3: 'puzzle-password-level_3',\n    levelPassword4: 'puzzle-password-level_4',\n    levelPassword5: 'puzzle-password-level_5',\n    levelPassword6: 'puzzle-password-level_6',\n  },\n};\nconst messages = {\n  app: {\n    title: 'Pipes Puzzle',\n  },\n  text: {\n    levelPrefix: 'Level',\n    check: 'Check',\n    giveUp: 'Give Up!',\n    return: 'Return',\n    nextLevel: 'Next Level',\n    loading: 'Please wait...',\n    connectionError: 'Something went wrong. Please try again.',\n    remainingVerifyAttemptText: \"You don't have unlimited check opportunities, only\",\n    achievemessage: 'Well done! You now have the password for this level:',\n    gameOverMessage: 'Game over! Try again.',\n    gameFinishedMessage: 'We never thought anyone would see this! You made the impossible possible! ',\n    welcomeTitle: 'Welcome!',\n    welcomeDescription: 'The goal of the puzzle is to rotate the tiles on the map to make all pipes connected in a single group, with no loops and no dangling pipes. Click a tile with the mouse to rotate it.\\n Choose a level to start.',\n    copyright: 'All rights reserved.',\n  },\n  levelDescriptions: {\n    level_1: '(8x8) A Cute Welcome',\n    level_2: '(20x25) Warming You Up',\n    level_3: \"(50x50) Let's Do This!\",\n    level_4: '(100x200) Getting Serious!',\n    level_5: '(300x400) Standing Ovation for the Pro!',\n    level_6: '(1000x1000) Take This Monster Down, Champ.',\n  },\n};\n\nexport type { IConstants };\nexport { constants, messages };\n\n","import { TPuzzleData } from 'Services/Socket';\n\nconst createPuzzleDataFromMessage = (message: string): TPuzzleData => {\n  return message.replace('map:', '')?.trim().split('\\n').map((x: string) => x?.trim().split(''));\n};\n\nconst getStorageItem = (key: string): string | null => {\n  return window.localStorage.getItem(key) || null;\n};\n\nconst setStorageItem = (key: string, value: string): void => {\n  window.localStorage.setItem(key, value);\n};\n\nexport {\n  createPuzzleDataFromMessage,\n  getStorageItem,\n  setStorageItem,\n};\n","import { constants } from 'Utils/constants';\nimport { createPuzzleDataFromMessage, setStorageItem } from 'Utils/helpers';\n\ntype TPuzzleData = string[][];\n\ninterface ICreateNewSocketAndPuzzle {\n  puzzleData: TPuzzleData;\n  puzzleDataDimension: number[];\n  webSocket: WebSocket;\n}\n\ninterface IRotatePuzzle {\n  webSocket: WebSocket;\n  cellX: number;\n  cellY: number;\n}\n\ninterface IVerifyPuzzle {\n  isCorrect: boolean;\n  isGameOver: boolean;\n  levelPassword: string;\n}\n\nclass Socket {\n\n  private static instance: Socket;\n  constructor(webSocketUrl?: string) {\n    this._webSocketUrl = webSocketUrl || this._webSocketUrl;\n    if (!Socket.instance) {\n      Socket.instance = this;\n    }\n    return Socket.instance;\n  }\n  private _webSocketUrl: string = constants.api.defaultWebSocketUrl;\n\n  private onOpenConnectionAsync = async (webSocket: WebSocket): Promise<boolean> => new Promise((resolve) => {\n    webSocket.onopen = () => {\n      resolve(true);\n    };\n    webSocket.onerror = () => {\n      resolve(false);\n    };\n  });\n\n  private onRecieveMessageAsync = async (webSocket: WebSocket): Promise<string | null> => new Promise((resolve) => {\n    webSocket.onmessage = (event: MessageEvent) => {\n      const message = event.data || '';\n      resolve(message);\n    };\n    webSocket.onerror = () => {\n      resolve(null);\n    };\n  });\n\n  private onCloseConnectionAsync = async (webSocket: WebSocket): Promise<number | null> => new Promise((resolve) => {\n    webSocket.onclose = () => {\n      resolve(webSocket.readyState);\n    };\n    webSocket.onerror = () => {\n      resolve(null);\n    };\n  });\n\n  createNewPuzzle = async (puzzleLevel: number): Promise<ICreateNewSocketAndPuzzle | null> => {\n    try {\n\n      const webSocket = new WebSocket(this._webSocketUrl);\n      const isConnectionStarted = await this.onOpenConnectionAsync(webSocket);\n      if (!isConnectionStarted) {\n        throw new Error();\n      }\n\n      webSocket.send(`${constants.api.requestNew} ${puzzleLevel}`);\n      const newResponse = await this.onRecieveMessageAsync(webSocket);\n      if (!newResponse?.startsWith(constants.api.responseNewSuccess)) {\n        throw new Error();\n      }\n\n      webSocket.send(constants.api.requestMap);\n      const mapResponse = await this.onRecieveMessageAsync(webSocket);\n      if (!mapResponse?.startsWith(constants.api.responseMapSuccess)) {\n        throw new Error();\n      }\n\n      const puzzleData = createPuzzleDataFromMessage(mapResponse);\n      const puzzleDataDimension = [puzzleData.length, puzzleData[0].length];\n      return {\n        puzzleData,\n        puzzleDataDimension,\n        webSocket,\n      };\n    } catch (error) {\n      return null;\n    }\n  };\n\n  rotatePuzzleCellAsync = async ({ webSocket, cellX, cellY }: IRotatePuzzle): Promise<TPuzzleData | null> => {\n    try {\n      webSocket.send(`${constants.api.requestRotate} ${cellX} ${cellY}`);\n      let response = await this.onRecieveMessageAsync(webSocket);\n      while (!response?.startsWith(constants.api.responseRotateSuccess)) {\n        response = await this.onRecieveMessageAsync(webSocket);\n      }\n\n      webSocket.send(constants.api.requestMap);\n      let rotateIsMap = await this.onRecieveMessageAsync(webSocket);\n      while (!rotateIsMap?.startsWith(constants.api.responseMapSuccess)) {\n        rotateIsMap = await this.onRecieveMessageAsync(webSocket);\n      }\n\n      const puzzleData = createPuzzleDataFromMessage(rotateIsMap);\n      return puzzleData;\n\n    } catch (error) {\n      return null;\n    }\n  };\n\n  verifyPuzzleAsync = async (webSocket: WebSocket, puzzleLevel: number): Promise<IVerifyPuzzle | null> => {\n    try {\n      webSocket.send(constants.api.requestVerify);\n      const isVerified = await this.onRecieveMessageAsync(webSocket);\n\n      // is has an error, etc...\n      if (!isVerified) {\n        throw new Error();\n      }\n\n      // base response, also this is for \"incorrect\"\n      let response: IVerifyPuzzle = {\n        isCorrect: false,\n        isGameOver: false,\n        levelPassword: '',\n      };\n\n      // puzzle is over attempt\n      if (isVerified?.startsWith(constants.api.responseGameOver)) {\n        response = {\n          isCorrect: false,\n          isGameOver: true,\n          levelPassword: '',\n        };\n      }\n\n      // puzzle is verified\n      if (isVerified?.startsWith(constants.api.responseVerifyIsCorrect)) {\n        const password = isVerified.split(constants.api.responsePassword).pop()?.trim() || '';\n        setStorageItem(`${constants.localStorageKeyPrefix}${puzzleLevel}`, password);\n\n        response = {\n          isCorrect: true,\n          isGameOver: false,\n          levelPassword: password,\n        };\n      }\n\n      return response;\n\n    } catch (error) {\n      return null;\n    }\n  };\n\n  goToNextLevelAsync = async (webSocket: WebSocket, nextLevel: number): Promise<{ puzzleData: TPuzzleData, puzzleDataDimension: number[] } | null> => {\n    try {\n\n      const nextAvailableLevel = nextLevel > constants.api.maxLevel ? constants.api.maxLevel : nextLevel;\n\n      webSocket.send(`${constants.api.requestNew} ${nextAvailableLevel}`);\n      const newResponse = await this.onRecieveMessageAsync(webSocket);\n      if (!newResponse?.startsWith(constants.api.responseNewSuccess)) {\n        throw new Error();\n      }\n\n      webSocket.send(constants.api.requestMap);\n      const mapResponse = await this.onRecieveMessageAsync(webSocket);\n      if (!mapResponse?.startsWith(constants.api.responseMapSuccess)) {\n        throw new Error();\n      }\n\n      const puzzleData = createPuzzleDataFromMessage(mapResponse);\n      const puzzleDataDimension = [puzzleData.length, puzzleData[0].length];\n      return {\n        puzzleData,\n        puzzleDataDimension\n      };\n    } catch (error) {\n      return null;\n    }\n  };\n\n  closeWebSocketAsync = async (webSocket: WebSocket): Promise<number | null> => {\n    try {\n      webSocket.close();\n      const response = await this.onCloseConnectionAsync(webSocket);\n      if (response !== null) {\n        return response;\n      } else {\n        throw new Error();\n      }\n    } catch (error) {\n      return null;\n    }\n  };\n}\n\nexport type {\n  TPuzzleData,\n  ICreateNewSocketAndPuzzle,\n  IRotatePuzzle,\n};\n\nexport { Socket };\n","\nimport { IReduxActionTypes, IReduxActions, IPuzzleDispatch, Dispatch } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport { createAction } from '@reduxjs/toolkit';\nimport { IRotatePuzzle, Socket, TPuzzleData } from 'Services/Socket';\n\n\nconst rdxActionTypes: IReduxActionTypes = {\n  PUZZLE_STARTED: 'PUZZLE_STARTED',\n  PUZZLE_RETURNED: 'PUZZLE_RETURNED',\n  PUZZLE_LOADING: 'PUZZLE_LOADING',\n  PUZZLE_FAILED: 'PUZZLE_FAILED',\n  PUZZLE_CREATED: 'PUZZLE_CREATED',\n  PUZZLE_UPDATED: 'PUZZLE_UPDATED',\n  PUZZLE_GAMEOVER: 'PUZZLE_GAMEOVER',\n  PUZZLE_VALIDATIONATTEMPTDECREASED: 'PUZZLE_VALIDATIONATTEMPTDECREASED',\n  PUZZLE_NEXTLEVELAVAILABLE: 'PUZZLE_NEXTLEVELAVAILABLE',\n  PUZZLE_NEXTLEVELCREATED: 'PUZZLE_NEXTLEVELCREATED',\n};\n\nconst puzzleStarted = createAction<number | undefined>(rdxActionTypes.PUZZLE_STARTED);\n\nconst puzzleReturned = createAction(rdxActionTypes.PUZZLE_RETURNED);\n\nconst puzzleLoading = createAction(rdxActionTypes.PUZZLE_LOADING);\n\nconst puzzleFailed = createAction(rdxActionTypes.PUZZLE_FAILED);\n\nconst puzzleCreated = createAction(rdxActionTypes.PUZZLE_CREATED, (data: TPuzzleData, puzzleDataDimension: number[], webSocket: WebSocket) => {\n  return {\n    payload: {\n      data,\n      puzzleDataDimension,\n      webSocket\n    }\n  };\n});\n\nconst puzzleUpdated = createAction<TPuzzleData | undefined>(rdxActionTypes.PUZZLE_UPDATED);\n\nconst puzzleGameOver = createAction(rdxActionTypes.PUZZLE_GAMEOVER);\n\nconst puzzleDecreaseValidationAttempt = createAction(rdxActionTypes.PUZZLE_VALIDATIONATTEMPTDECREASED);\n\nconst puzzleNextLevelAvailability = createAction<string | undefined>(rdxActionTypes.PUZZLE_NEXTLEVELAVAILABLE);\n\nconst puzzleNextLevelCreated = createAction(rdxActionTypes.PUZZLE_NEXTLEVELCREATED, (puzzleData: TPuzzleData, puzzleDataDimension: number[]) => {\n  return {\n    payload: {\n      puzzleData,\n      puzzleDataDimension\n    }\n  };\n});\n\n\nconst rdxReturnToWelcomeAsync = (webSocket: WebSocket | undefined): IPuzzleDispatch => {\n  return async (dispatch: Dispatch<IReduxActions>) => {\n    try {\n      if (webSocket) {\n        const response = await new Socket().closeWebSocketAsync(webSocket);\n        if (response !== null) {\n          dispatch(puzzleReturned());\n        } else {\n          throw new Error();\n        }\n      } else {\n        dispatch(puzzleReturned());\n      }\n    } catch (exception) {\n      dispatch(puzzleFailed());\n    }\n  };\n};\n\nconst rdxCreateWebSocketAndPuzzleAsync = (puzzleLevel: number): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\n  dispatch(puzzleLoading());\n  try {\n    const response = await new Socket().createNewPuzzle(puzzleLevel);\n    if (response instanceof Object) {\n      dispatch(puzzleCreated(response.puzzleData, response.puzzleDataDimension, response.webSocket));\n    } else {\n      throw new Error();\n    }\n  } catch (exception) {\n    dispatch(puzzleFailed());\n  }\n};\n\nconst rdxrotatePuzzleCellAsync = ({ webSocket, cellX, cellY }: IRotatePuzzle): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\n  try {\n    const puzzleData = await new Socket().rotatePuzzleCellAsync({ webSocket, cellX, cellY });\n    if (puzzleData) {\n      dispatch(puzzleUpdated(puzzleData));\n    } else {\n      throw new Error();\n    }\n  } catch (exception) {\n    dispatch(puzzleFailed());\n  }\n};\n\nconst rdxValidateExistingPuzzleAsync = (webSocket: WebSocket, puzzleLevel: number): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\n  try {\n    const validation = await new Socket().verifyPuzzleAsync(webSocket, puzzleLevel);\n\n    // has an error\n    if (!validation) {\n      throw new Error();\n    }\n\n    // is not correct\n    if (!validation.isCorrect) {\n      dispatch(puzzleDecreaseValidationAttempt());\n    }\n\n    // is game over\n    if (validation.isGameOver) {\n      dispatch(puzzleGameOver());\n    }\n\n    // is correct\n    if (validation.isCorrect) {\n      dispatch(puzzleNextLevelAvailability(validation.levelPassword));\n    }\n\n  } catch (error) {\n    dispatch(puzzleFailed());\n  }\n};\n\nconst rdxgoToNextLevelAsync = (webSocket: WebSocket, puzzleLevel: number): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\n  dispatch(puzzleLoading());\n  try {\n    const response = await new Socket().goToNextLevelAsync(webSocket, (puzzleLevel + 1));\n    if (response) {\n      dispatch(puzzleNextLevelCreated(response.puzzleData, response.puzzleDataDimension));\n    } else {\n      throw new Error();\n    }\n  } catch (exception) {\n    dispatch(puzzleFailed());\n  }\n};\n\n\nexport {\n  rdxActionTypes,\n  rdxReturnToWelcomeAsync,\n  rdxCreateWebSocketAndPuzzleAsync,\n  rdxrotatePuzzleCellAsync,\n  rdxValidateExistingPuzzleAsync,\n  rdxgoToNextLevelAsync,\n  puzzleStarted,\n  puzzleReturned,\n  puzzleLoading,\n  puzzleFailed,\n  puzzleCreated,\n  puzzleUpdated,\n  puzzleDecreaseValidationAttempt,\n  puzzleGameOver,\n  puzzleNextLevelAvailability,\n  puzzleNextLevelCreated\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport { constants } from 'Utils/constants';\n\nimport { puzzleCreated, puzzleDecreaseValidationAttempt, puzzleFailed, puzzleGameOver, puzzleLoading, puzzleNextLevelAvailability, puzzleNextLevelCreated, puzzleReturned, puzzleStarted, puzzleUpdated } from '../actions/puzzleActions';\n\n\nconst puzzleInitialState: IReduxState = {\n  puzzleIsWelcome: true,\n  puzzleLevel: 1,\n  puzzleLevelPassword: '',\n  puzzleIsStarted: false,\n  puzzleIsOver: false,\n  puzzleIsLoading: false,\n  puzzleIsError: false,\n  puzzleData: [],\n  puzzleDataDimension: [0, 0],\n  puzzleWebSocket: undefined,\n  puzzleRemainingValidationAttempt: constants.api.remainingVerifyAttemptCount,\n  puzzleIsNextLevelAvailable: false,\n};\n\nconst puzzleReducer = createReducer(puzzleInitialState, (builder) => {\n  builder\n    .addCase(puzzleStarted, (state, action) => {\n      state.puzzleIsWelcome = false;\n      state.puzzleLevel = (action.payload || puzzleInitialState.puzzleLevel);\n    })\n    .addCase(puzzleReturned, (state, action) => puzzleInitialState)\n    .addCase(puzzleLoading, (state, action) => {\n      state.puzzleIsLoading = true;\n      state.puzzleIsError = false;\n    })\n    .addCase(puzzleFailed, (state, action) => {\n      state.puzzleIsLoading = false;\n      state.puzzleIsError = true;\n    })\n    .addCase(puzzleCreated, (state, action) => {\n      state.puzzleIsStarted = true;\n      state.puzzleIsLoading = false;\n      state.puzzleIsError = false;\n      state.puzzleData = action.payload.data;\n      state.puzzleDataDimension = action.payload.puzzleDataDimension;\n      state.puzzleWebSocket = action.payload.webSocket;\n    })\n    .addCase(puzzleUpdated, (state, action) => {\n      state.puzzleData = action.payload;\n    })\n    .addCase(puzzleDecreaseValidationAttempt, (state, action) => {\n      state.puzzleRemainingValidationAttempt = (state.puzzleRemainingValidationAttempt - 1);\n    })\n    .addCase(puzzleGameOver, (state, action) => {\n      state.puzzleIsOver = true;\n    })\n    .addCase(puzzleNextLevelAvailability, (state, action) => {\n      state.puzzleIsNextLevelAvailable = true;\n      state.puzzleLevelPassword = (action.payload || '');\n    })\n    .addCase(puzzleNextLevelCreated, (state, action) => {\n      state.puzzleIsWelcome = false;\n      state.puzzleIsStarted = true;\n      state.puzzleIsLoading = false;\n      state.puzzleIsNextLevelAvailable = false;\n      state.puzzleLevel = (state.puzzleLevel + 1);\n      state.puzzleData = action.payload.puzzleData;\n      state.puzzleDataDimension = action.payload.puzzleDataDimension;\n      state.puzzleRemainingValidationAttempt = puzzleInitialState.puzzleRemainingValidationAttempt;\n    });\n});\n\nexport {\n  puzzleInitialState,\n  puzzleReducer,\n};\n","\nimport { puzzleReducer } from 'Redux-Manager/reducers/puzzleReducer';\n\nconst appReducers = {\n  puzzleReducer,\n};\n\nexport { appReducers };\n","import { messages } from 'Utils/constants';\r\nimport './Footer.scss';\r\n\r\nfunction Footer(): JSX.Element {\r\n  return (\r\n    <footer className='footer'>\r\n      <div className='footer-container'>\r\n        <div className='copyright'>\r\n          <p className='copyright-text'>\r\n            &copy; {new Date().getFullYear()} {messages.app.title}.{' '}\r\n            {messages.text.copyright}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import 'Components/layout/header/Header.scss';\nimport { messages } from 'Utils/constants';\n\nfunction Header(): JSX.Element {\n  return (\n    <header className='header'>\n      <div className='container'>\n        <div className='logo'>\n          <svg className='logo-image' width='100' height='100' viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg' >\n            <path fill='#ff8600' d='M212.125 20.156V59.72H39.53V188.56H69.846V293H39.623V483.03H204.687v-12.936H382v-45.5h95.281V264.53h-25.655V74.813H384.03V20.157H212.126zm18.688 18.688h134.53l-.03 35.968H297V153.938H378.28v46.625h18.69V135.25h-81.283V93.5h117.25v171.03H342V201.47H224.656v9.343l-.03 70.187v9.344h75.467v-18.688h-56.75v-51.5h79.97l-.002 126.78-185.937-.03V252.72h41.656v53.686h18.72V174.062h66.875v-18.687h-85.563v78.654h-60.375V293H88.53V188.562h57.44v-18.687H58.22v-91.47h153.905v30.94H111.437v18.686h119.375V38.845zM342 283.22h116.594v122.686H301.97v18.688h61.31v26.812H204.69v-48.812H110v18.687h76v43.064H58.312V311.72h60.376v53.874h9.343l114.782.03v65H261.5v-65H342v-31.529h66.75v33.844h18.688V315.406H342V283.22z' />\n          </svg>\n          <h1 className='logo-text'>{messages.app.title}</h1>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import 'Components/layout/Layout.scss';\nimport Footer from './footer/Footer';\nimport Header from './header/Header';\n\ntype TChildren =\n  | React.ReactNode\n  | JSX.Element\n  | JSX.Element[]\n  | string\n  | string[]\n  | React.ReactChild\n  | React.ReactChild[];\n\ninterface ILayout {\n  children?: TChildren;\n}\n\nfunction Layout({ children }: ILayout): JSX.Element {\n  return (\n    <>\n      <Header />\n      <main className='layout'>\n        <div className='layout-container'>\n          <div className='layout-content'>{children}</div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default Layout;\n","import 'Components/pages/welcome/Welcome.scss';\nimport { FcKey } from 'react-icons/fc';\nimport { FiHelpCircle as IconPassword } from 'react-icons/fi';\nimport { HiLockClosed as IconLock } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\nimport { puzzleStarted } from 'Redux-Manager/actions/puzzleActions';\nimport { constants, messages } from 'Utils/constants';\nimport { getStorageItem } from 'Utils/helpers';\n\nfunction Welcome(): JSX.Element {\n  const dispatch = useDispatch();\n\n  const buttonStartHandler = (puzzleLevel: number): void => {\n    dispatch(puzzleStarted(puzzleLevel));\n  };\n\n  return (\n    <div className='welcome'>\n      <div className='welcome-container'>\n        <h1 className='welcome-title'>{messages.text.welcomeTitle}</h1>\n        <p className='welcome-description'>{messages.text.welcomeDescription}</p>\n      </div>\n\n      <div className='levels-container'>\n        <div className='level header-row'>\n          <div className='level-title'>{messages.text.levelPrefix}</div>\n          <div className='password-title'>\n            <FcKey className='password-icon' />\n          </div>\n        </div>\n\n        {Object.entries(constants.localStorageKeys).map(\n          ([, localKeyValue], localKeyIndex) => {\n            const levelPassword = getStorageItem(localKeyValue);\n            const prevLevelHasAchieved = getStorageItem(`${constants.localStorageKeyPrefix}${localKeyIndex}`);\n            const levelCanPlay = localKeyIndex === 0 || prevLevelHasAchieved;\n            const puzzleLevel = localKeyIndex + 1;\n            let levelDescription='';\n            Object.entries(messages.levelDescriptions).some((item) => {\n              if(item[0] === `level_${puzzleLevel}`){\n                levelDescription=item[1];\n                return true ;\n              }\n            });\n            return (\n              <div key={localKeyIndex} className={`level ${ levelCanPlay && levelPassword && 'level-success'}`}>\n                <div className='level-info level-image'>\n                  <button type='button' className={`play-button ${ levelCanPlay ? '' : 'disable'}`} onClick={ levelCanPlay ? () => buttonStartHandler(puzzleLevel) : undefined} >\n                    {!levelCanPlay && <IconLock className='lock-icon' />}\n                    <img src={process.env.PUBLIC_URL + `/Level_${puzzleLevel}.PNG`} className='play-button-image' />\n                  </button>\n                </div>\n                <div className={`level-info level-label ${!levelCanPlay ? 'level-locked' : '' }`} >\n                  <span className='level-description'>{levelDescription}</span>\n                </div>\n                <div className='level-info level-password'>\n                  { (levelCanPlay && levelPassword) || (<IconPassword className='password-placeholder-icon' />) }\n                </div>\n              </div>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Welcome;\n","import { FiRotateCw as IconLoading } from 'react-icons/fi';\nimport { messages } from 'Utils/constants';\n\n\nfunction GameLoading(): JSX.Element {\n  return (\n    <div className=\"puzzle puzzle-loading\">\n      <IconLoading className=\"icon loading-icon\" />\n      <p className=\"message loading-message\">{messages.text.loading}</p>\n    </div>\n  );\n}\n\nexport default GameLoading;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FiAlertCircle as IconFailure, FiCornerUpLeft as IconReturn } from 'react-icons/fi';\n\nimport { messages } from 'Utils/constants';\nimport { rdxReturnToWelcomeAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction GameError(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  return (\n    <div className=\"puzzle puzzle-error\">\n      <IconFailure className=\"icon error-icon\" />\n      <p className=\"message error-message\">{messages.text.connectionError}</p>\n      <button type=\"button\" className=\"action-return\" onClick={buttonReturnHandler}>\n        <IconReturn className=\"action-return-icon\" />\n        <span>{messages.text.return}</span>\n      </button>\n    </div>\n  );\n}\n\nexport default GameError;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FiFrown as IconGameOver, FiCornerUpLeft as IconReturn } from 'react-icons/fi';\n\nimport { messages } from 'Utils/constants';\nimport { rdxReturnToWelcomeAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction GameOver(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  return (\n    <div className=\"puzzle-game-over\">\n      <IconGameOver className=\"icon game-over-icon\" />\n      <p className=\"message game-over-message\">{messages.text.gameOverMessage}</p>\n      <button type=\"button\" className=\"action-return action-game-over\" onClick={buttonReturnHandler}>\n        <IconReturn className=\"action-return-icon\" />\n        <span>{messages.text.return}</span>\n      </button>\n    </div>\n  );\n}\n\nexport default GameOver;\n","enum EWebSocketReadyState {\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n\nconst mapWebSocketReadyState = new Map<number, string>([\n  [EWebSocketReadyState.CONNECTING, `(Socket has been created. The connection is not yet open.)`],\n  [EWebSocketReadyState.OPEN, `(The connection is open and ready to communicate.)`],\n  [EWebSocketReadyState.CLOSING, `(The connection is in the process of closing.)`],\n  [EWebSocketReadyState.CLOSED, `(The connection is closed or couldn't be opened.)`],\n]);\n\nconst getWebSocketReadyStateDesc = (enumeration?: number): string => {\n  if (enumeration !== undefined) {\n    return mapWebSocketReadyState.get(enumeration) || mapWebSocketReadyState.get(EWebSocketReadyState.CLOSED) || '';\n  } else {\n    return '';\n  }\n};\n\nexport {\n  getWebSocketReadyStateDesc,\n  EWebSocketReadyState\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FiCheckCircle as IconValidate, FiFrown as IconGiveUp } from 'react-icons/fi';\n\nimport { messages } from 'Utils/constants';\nimport { getWebSocketReadyStateDesc } from 'Utils/enumerations';\n\nimport { rdxReturnToWelcomeAsync, rdxValidateExistingPuzzleAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction GameActions(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleRemainingValidationAttempt = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleRemainingValidationAttempt);\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n  const puzzleLevel = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevel);\n\n  const buttonValidateHandler = () => {\n    if (puzzleWebSocket) {\n      dispatch(rdxValidateExistingPuzzleAsync(puzzleWebSocket, puzzleLevel));\n    }\n  };\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  return (\n    <div className=\"puzzle-actions\">\n      <span className=\"puzzle-level\">{messages.text.levelPrefix} {puzzleLevel}</span>\n      <div className=\"action-buttons-wrapper\">\n        <button type=\"button\" className=\"action-button\" onClick={buttonReturnHandler}>\n          <IconGiveUp className=\"action-icon\" />\n          <span>{messages.text.giveUp}</span>\n        </button>\n        <button type=\"button\" className=\"action-button action-validate\" onClick={buttonValidateHandler}>\n          <IconValidate className=\"action-icon\" />\n          <span>{messages.text.check}</span>\n        </button>\n      </div>\n      <div className=\"info\">\n        <p className=\"info-message\">\n          <span>{messages.text.remainingVerifyAttemptText}</span>\n          <span className=\"count\">{puzzleRemainingValidationAttempt}</span>\n        </p>\n        <p className={`info-connection-state state_${puzzleWebSocket?.readyState || ''}`}>{getWebSocketReadyStateDesc(puzzleWebSocket?.readyState)}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default GameActions;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FiGift as IconWellDone, FiArrowRightCircle as IconNextLevel, FiCornerUpLeft as IconReturn } from 'react-icons/fi';\n\nimport { constants, messages } from 'Utils/constants';\nimport { rdxReturnToWelcomeAsync, rdxgoToNextLevelAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction GameNextLevel(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n  const puzzleLevelPassword = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevelPassword);\n  const puzzleLevel = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevel);\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  const buttonNextLevelHandler = () => {\n    if (puzzleWebSocket) {\n      dispatch(rdxgoToNextLevelAsync(puzzleWebSocket, puzzleLevel));\n    }\n  };\n\n  return (\n    <div className=\"puzzle-actions\">\n      <div className=\"winner\">\n        <IconWellDone className=\"icon winner-icon\" />\n        <p className=\"winner-message\">\n          <span>{messages.text.achievemessage}</span>\n          <span className=\"message-highlight\">{puzzleLevelPassword}</span>\n        </p>\n      </div>\n      <div className=\"action-buttons-wrapper\">\n        <button type=\"button\" className=\"action-button\" onClick={buttonReturnHandler}>\n          <IconReturn className=\"action-icon\" />\n          <span>{messages.text.return}</span>\n        </button>\n        {puzzleLevel < constants.api.maxLevel &&\n          <button type=\"button\" className=\"action-button action-next\" onClick={buttonNextLevelHandler}>\n            <IconNextLevel className=\"action-icon\" />\n            <span>{messages.text.nextLevel}</span>\n          </button>\n        }\n        {puzzleLevel >= constants.api.maxLevel &&\n          <p className=\"level-finish\">{messages.text.gameFinishedMessage}</p>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default GameNextLevel;\n","import { useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction PuzzleCell(props:{id:string}): JSX.Element {\n  const [rowIndex,cellIndex]=props.id.split('_');\n  const  data  = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleData[+rowIndex][+cellIndex]);\n  return (\n    <button key={+cellIndex} id={props.id} className={'puzzle-cell'} >{data}</button>\n  );\n}\n\nexport default PuzzleCell;\n","import { useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport PuzzleCell from './PuzzleCell';\n\n\nfunction PuzzleRow(props:{rowIndex:number,style:any}): JSX.Element {\n\n  const puzzleDataDimension = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleDataDimension);\n\n  const cells = [];\n  for (let cellIndex = 0; cellIndex < puzzleDataDimension[1]; cellIndex++) {\n    cells.push(<PuzzleCell key={`${props.rowIndex}_${cellIndex}`} id={`${props.rowIndex}_${cellIndex}`}></PuzzleCell>);\n  }\n  \n  return (\n    <div key={props.rowIndex} className=\"puzzle-row\" style={props.style}>\n      {cells}\n    </div>\n  );\n}\n\nexport default PuzzleRow;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager';\nimport PuzzleRow from './PuzzleRow';\nimport { List } from 'react-virtualized';\nimport { constants } from 'Utils/constants';\nimport { rdxrotatePuzzleCellAsync } from 'Redux-Manager/actions/puzzleActions';\n\n\n\nfunction PuzzleBody(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n  const puzzleDataDimension = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleDataDimension);\n  const puzzleRemainingValidationAttempt = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleRemainingValidationAttempt);\n  const [stateBounceClassName, setStateBounceClassName] = useState<string>('');\n\n  useEffect(() => {\n    if(puzzleRemainingValidationAttempt !== constants.api.remainingVerifyAttemptCount){\n      setStateBounceClassName(' puzzle-bounce');\n      const toggleClassDelay = setTimeout(() => {\n        setStateBounceClassName('');\n        clearTimeout(toggleClassDelay);\n      }, 600);\n    }\n  }, [ puzzleRemainingValidationAttempt]);\n\n  \n  const renderRow = ( props:{ key:any, index:any, style:any} ) => {\n    return (\n      <PuzzleRow key={props.key} rowIndex={props.index} style={props.style} ></PuzzleRow>\n    );\n  };\n\n  const buttonRotateHandler=(event:any)=>{\n    if(event.target.className==='puzzle-cell'){\n      const [cellY,cellX]=event.target.id.split('_');\n      if (puzzleWebSocket) {\n        dispatch(rdxrotatePuzzleCellAsync({ webSocket: puzzleWebSocket, cellX, cellY }));\n      }\n    }\n  };\n\n  const height=puzzleDataDimension[0] < 18 ? puzzleDataDimension[0] : 18 ;\n  return (\n    <div className={`puzzle-body${stateBounceClassName} attempt-${puzzleRemainingValidationAttempt}`} onClick={(event:any)=>buttonRotateHandler(event)}>\n      <List\n        width={puzzleDataDimension[0]*40}\n        height={height*40}\n        rowRenderer={renderRow}\n        rowCount={puzzleDataDimension[0]}\n        rowHeight={40}\n      />\n    </div>\n  );\n}\n\nexport default PuzzleBody;\n","import { useLayoutEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nimport GameLoading from 'Components/pages/game/partials/Loading';\nimport GameError from 'Components/pages/game/partials/Error';\nimport GameOver from 'Components/pages/game/partials/GameOver';\nimport GameActions from 'Components/pages/game/partials/Actions';\nimport GameNextLevel from 'Components/pages/game/partials/NextLevel';\nimport PuzzleBody from 'Components/pages/game/partials/PuzzleBody';\n\nimport 'Components/pages/game/Game.scss';\nimport { rdxCreateWebSocketAndPuzzleAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction Game(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleLevel = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevel);\n  const puzzleIsStarted = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsStarted);\n  const puzzleIsLoading = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsLoading);\n  const puzzleIsError = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsError);\n  const puzzleIsOver = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsOver);\n  const puzzleIsNextLevelAvailable = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsNextLevelAvailable);\n\n\n  useLayoutEffect(() => {\n    if (!puzzleIsStarted) {\n      dispatch(rdxCreateWebSocketAndPuzzleAsync(puzzleLevel));\n    }\n  }, [dispatch, puzzleIsStarted, puzzleLevel]);\n\n\n  if (puzzleIsLoading) {\n    return <GameLoading />;\n  }\n\n  if (puzzleIsError) {\n    return <GameError />;\n  }\n\n  return (\n    <div className={`puzzle ${puzzleIsNextLevelAvailable ? 'puzzle-success' : ''} ${puzzleIsOver ? 'puzzle-failed' : ''}`}>\n      {puzzleIsOver && <GameOver />}\n      {(!puzzleIsOver && !puzzleIsNextLevelAvailable) && <GameActions />}\n      {puzzleIsNextLevelAvailable && <GameNextLevel />}\n      <PuzzleBody />\n    </div>\n  );\n}\n\nexport default Game;\n","\n\nimport Layout from 'Components/layout/Layout';\nimport Welcome from 'Components/pages/welcome/Welcome';\nimport Game from 'Components/pages/game/Game';\nimport { useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction App(): JSX.Element {\n  const puzzleIsWelcome = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsWelcome);\n\n  return (\n    <Layout>\n      {puzzleIsWelcome && <Welcome />}\n      {!puzzleIsWelcome && <Game />}\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'Styles/reset-styles.scss';\nimport { appReducers } from 'Redux-Manager/reducers';\nimport App from 'App';\nimport { configureStore } from '@reduxjs/toolkit';\n\nconst PipesPuzzleGameApp = () => {\n  const store =configureStore({\n    reducer:appReducers,\n    devTools:process.env.NODE_ENV !== 'production',\n    middleware: (getDefaultMiddleware) => {\n      return getDefaultMiddleware({\n        serializableCheck: {\n          // Ignore these action types\n          ignoredActions: ['PUZZLE_CREATED','PUZZLE_Updated'],\n          // Ignore these paths in the state\n          ignoredPaths: ['puzzleReducer.puzzleWebSocket'],\n        },\n      });\n    }\n  });\n  \n  return (\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  );\n};\n\nconst pipePuzzleRootElement = window.document.getElementById('PipesPuzzleGameApp');\nif (pipePuzzleRootElement?.hasChildNodes()) {\n  hydrate(<PipesPuzzleGameApp />, pipePuzzleRootElement);\n} else {\n  render(<PipesPuzzleGameApp />, pipePuzzleRootElement);\n}\n"],"sourceRoot":""}