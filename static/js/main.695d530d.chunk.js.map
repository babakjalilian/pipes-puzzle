{"version":3,"sources":["Utils/constants/index.ts","Utils/helpers/index.ts","Services/Socket.ts","Redux-Manager/actions/puzzleActions.ts","Redux-Manager/reducers/puzzleReducer.ts","Redux-Manager/reducers/index.ts","Components/game/partials/GameOver.tsx","Utils/enumerations/index.ts","Components/game/partials/PuzzleActions.tsx","Components/game/partials/PuzzleCell.tsx","Components/game/partials/PuzzleRow.tsx","Components/game/partials/PuzzleBody.tsx","Components/game/partials/PuzzleError.tsx","Components/game/partials/PuzzleLoading.tsx","Components/game/partials/PuzzleNextLevel.tsx","Components/game/Game.tsx","Components/layout/footer/Footer.tsx","Components/layout/header/Header.tsx","Components/layout/Layout.tsx","Components/welcome/Welcome.tsx","App.tsx","index.tsx"],"names":["constants","defaultWebSocketUrl","requestHelp","requestNew","requestMap","requestRotate","requestVerify","responseNewSuccess","responseRotateSuccess","responseMapSuccess","responseVerifyIsCorrect","responsePassword","responseGameOver","remainingVerifyAttemptCount","maxLevel","syncRotationsWithServerLimit","levelPassword1","levelPassword2","levelPassword3","levelPassword4","levelPassword5","levelPassword6","messages","title","levelPrefix","check","giveUp","return","nextLevel","loading","connectionError","remainingVerifyAttemptText","achievemessage","gameOverMessage","gameFinishedMessage","welcomeTitle","welcomeDescription","copyright","level_1","level_2","level_3","level_4","level_5","level_6","createPuzzleDataFromMessage","message","replace","trim","split","map","x","getStorageItem","key","window","localStorage","getItem","Socket","webSocketUrl","rotations","_webSocketUrl","onOpenConnectionAsync","webSocket","Promise","resolve","onopen","onerror","onRecieveMessageAsync","onmessage","event","data","onCloseConnectionAsync","onclose","readyState","createNewPuzzle","puzzleLevel","WebSocket","Error","send","newResponse","startsWith","mapResponse","puzzleData","puzzleDataDimension","length","rotatePuzzleCellsOnServer","rotationQueue","response","verifyPuzzleAsync","Object","keys","values","join","isVerified","isCorrect","isGameOver","levelPassword","password","pop","value","setItem","goToNextLevelAsync","nextAvailableLevel","closeWebSocketAsync","close","this","instance","rdxActionTypes","puzzleStarted","createAction","puzzleReturned","puzzleLoading","puzzleFailed","puzzleCreated","payload","puzzleUpdated","cellY","cellX","puzzleGameOver","puzzleVerifyEnabled","puzzleDecreaseValidationAttempt","puzzleNextLevelAvailability","puzzleNextLevelCreated","rdxReturnToWelcomeAsync","dispatch","puzzleInitialState","puzzleIsWelcome","puzzleLevelPassword","puzzleIsStarted","puzzleIsOver","puzzleIsLoading","puzzleIsError","puzzleWebSocket","undefined","puzzleRemainingValidationAttempt","puzzleIsNextLevelAvailable","puzzleVerifyEnable","appReducers","puzzleReducer","createReducer","builder","addCase","state","action","shape","rotateCell","GameOver","EWebSocketReadyState","useDispatch","useSelector","className","type","onClick","mapWebSocketReadyState","Map","CONNECTING","OPEN","CLOSING","CLOSED","PuzzleActions","enumeration","validation","rdxValidateExistingPuzzleAsync","disabled","get","PuzzleCell","props","id","rowIndex","cellIndex","PuzzleRow","cells","push","style","PuzzleBody","useState","stateBounceClassName","setStateBounceClassName","socketInstance","useEffect","toggleClassDelay","setTimeout","clearTimeout","buttonRotateHandler","rotationCoordinate","target","exception","rdxRotatePuzzleCellOnClient","concat","rdxRotatePuzzleCellsOnServer","height","width","rowRenderer","index","rowCount","rowHeight","PuzzleError","PuzzleLoading","PuzzleNextLevel","rdxgoToNextLevelAsync","Game","useLayoutEffect","rdxCreateWebSocketAndPuzzleAsync","Footer","Date","getFullYear","Header","viewBox","xmlns","fill","d","Layout","children","Welcome","entries","localKeyIndex","localKeyValue","prevLevelHasAchieved","levelCanPlay","levelDescription","some","item","buttonStartHandler","src","process","App","PipesPuzzleGameApp","store","configureStore","reducer","devTools","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredPaths","StrictMode","pipePuzzleRootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.695d530d.chunk.js","sourcesContent":["interface IConstants {\n  api: {\n    defaultWebSocketUrl: string;\n    requestHelp: string;\n    requestNew: string;\n    requestMap: string;\n    requestRotate: string;\n    requestVerify: string;\n    responseNewSuccess: string;\n    responseRotateSuccess: string;\n    responseMapSuccess: string;\n    responseVerifyIsCorrect: string;\n    responsePassword: string;\n    responseGameOver: string;\n    remainingVerifyAttemptCount: number;\n    syncRotationsWithServerLimit:number;\n    maxLevel: number;\n  };\n  localStorageKeyPrefix: string;\n  localStorageKeys: {\n    levelPassword1: string;\n    levelPassword2: string;\n    levelPassword3: string;\n    levelPassword4: string;\n    levelPassword5: string;\n    levelPassword6: string;\n  };\n}\n\nconst constants: IConstants = {\n  api: {\n    defaultWebSocketUrl: 'wss://hometask.eg1236.com/game-pipes/',\n    requestHelp: 'help', // help - lists other commands\n    requestNew: 'new', // new <l> - chooses the game level, <1|6>\n    requestMap: 'map', // map - returns the current map\n    requestRotate: 'rotate', // rotate <x> <y> - rotates the tile at coordinates\n    requestVerify: 'verify', // verify - verifies if the current solution is a valid one (if yes, it will return a level password).\n    responseNewSuccess: 'new: OK',\n    responseRotateSuccess: 'rotate: OK',\n    responseMapSuccess: 'map:',\n    responseVerifyIsCorrect: 'verify: Correct!',\n    responsePassword: 'Password:',\n    responseGameOver: 'verify: Only 10',\n    remainingVerifyAttemptCount: 12,\n    maxLevel: 6,\n    syncRotationsWithServerLimit:50,\n  },\n  localStorageKeyPrefix: 'puzzle-password-level_',\n  localStorageKeys: {\n    levelPassword1: 'puzzle-password-level_1',\n    levelPassword2: 'puzzle-password-level_2',\n    levelPassword3: 'puzzle-password-level_3',\n    levelPassword4: 'puzzle-password-level_4',\n    levelPassword5: 'puzzle-password-level_5',\n    levelPassword6: 'puzzle-password-level_6',\n  },\n};\nconst messages = {\n  app: {\n    title: 'Pipes Puzzle',\n  },\n  text: {\n    levelPrefix: 'Level',\n    check: 'Check',\n    giveUp: 'Give Up!',\n    return: 'Return',\n    nextLevel: 'Next Level',\n    loading: 'Please wait...',\n    connectionError: 'Something went wrong. Please try again.',\n    remainingVerifyAttemptText: \"You don't have unlimited check opportunities, only\",\n    achievemessage: 'Well done! You now have the password for this level:',\n    gameOverMessage: 'Game over! Try again.',\n    gameFinishedMessage: 'We never thought anyone would see this! You made the impossible possible! ',\n    welcomeTitle: 'Welcome!',\n    welcomeDescription: 'The goal of the puzzle is to rotate the tiles on the map to make all pipes connected in a single group, with no loops and no dangling pipes. Click a tile with the mouse to rotate it.\\n Choose a level to start.',\n    copyright: 'All rights reserved.',\n  },\n  levelDescriptions: {\n    level_1: '(8x8) A Cute Welcome',\n    level_2: '(20x25) Warming You Up',\n    level_3: \"(50x50) Let's Do This!\",\n    level_4: '(100x200) Getting Serious!',\n    level_5: '(300x400) Standing Ovation for the Pro!',\n    level_6: '(1000x1000) Take This Monster Down, Champ.',\n  },\n};\n\nexport type { IConstants };\nexport { constants, messages };\n\n","import { TPuzzleData } from 'Services/Socket';\r\n\r\nconst createPuzzleDataFromMessage = (message: string): TPuzzleData => {\r\n  return message.replace('map:', '')?.trim().split('\\n').map((x: string) => x?.trim().split(''));\r\n};\r\n\r\nconst getStorageItem = (key: string): string | null => {\r\n  return window.localStorage.getItem(key) || null;\r\n};\r\n\r\nconst setStorageItem = (key: string, value: string): void => {\r\n  window.localStorage.setItem(key, value);\r\n};\r\n\r\nconst rotateCell = (shape: string): string => {\r\n  switch (shape) {\r\n  case '┗':\r\n    return '┏';\r\n  case '┏':\r\n    return '┓';\r\n  case '┓':\r\n    return '┛';\r\n  case '┛':\r\n    return '┗';\r\n  case '┃':\r\n    return '━';\r\n  case '━':\r\n    return '┃';\r\n  case '┳':\r\n    return '┫';\r\n  case '┫':\r\n    return '┻';\r\n  case '┻':\r\n    return '┣';\r\n  case '┣':\r\n    return '┳';\r\n  case '╹':\r\n    return '╺';\r\n  case '╺':\r\n    return '╻';\r\n  case '╻':\r\n    return '╸';\r\n  case '╸':\r\n    return '╹';\r\n  case '╋':\r\n    return '╋';\r\n  default:\r\n    return '╋';\r\n  }\r\n};\r\n\r\nconst updateRotationQueue=(rotationCoordinate:string,rotationQueue:{ [key: string]: string; }) : { [key: string]: string; }=>{\r\n  if(rotationQueue[rotationCoordinate]) {\r\n    rotationQueue[rotationCoordinate] = rotationQueue[rotationCoordinate].concat(`\\n${rotationCoordinate}`);\r\n  } else {\r\n    rotationQueue[rotationCoordinate]=`\\n${rotationCoordinate}`;\r\n  }\r\n\r\n  const numberOfRotations=rotationQueue[rotationCoordinate].trim().split('\\n').length;\r\n  if(numberOfRotations===4) {\r\n    delete rotationQueue[rotationCoordinate];\r\n  }\r\n  return rotationQueue;\r\n};\r\n\r\nexport {\r\n  createPuzzleDataFromMessage,\r\n  getStorageItem,\r\n  setStorageItem,\r\n  rotateCell,\r\n  updateRotationQueue\r\n};\r\n\r\n","import { constants } from 'Utils/constants';\r\nimport { createPuzzleDataFromMessage, setStorageItem } from 'Utils/helpers';\r\n\r\ntype TPuzzleData = string[][];\r\n\r\ninterface ICreateNewSocketAndPuzzle {\r\n  puzzleData: TPuzzleData;\r\n  puzzleDataDimension: number[];\r\n  webSocket: WebSocket;\r\n}\r\n\r\ninterface IRotatePuzzle {\r\n  cellX: number;\r\n  cellY: number;\r\n}\r\n\r\ninterface IVerifyPuzzle {\r\n  isCorrect: boolean;\r\n  isGameOver: boolean;\r\n  levelPassword: string;\r\n}\r\n\r\nclass Socket {\r\n\r\n  rotations:{[key:string]:string}={};\r\n  private static instance: Socket;\r\n  constructor(webSocketUrl?: string) {\r\n    this._webSocketUrl = webSocketUrl || this._webSocketUrl;\r\n    if (!Socket.instance) {\r\n      Socket.instance = this;\r\n    }\r\n    return Socket.instance;\r\n  }\r\n  private _webSocketUrl: string = constants.api.defaultWebSocketUrl;\r\n\r\n  private onOpenConnectionAsync = async (webSocket: WebSocket): Promise<boolean> => new Promise((resolve) => {\r\n    webSocket.onopen = () => {\r\n      resolve(true);\r\n    };\r\n    webSocket.onerror = () => {\r\n      resolve(false);\r\n    };\r\n  });\r\n\r\n  private onRecieveMessageAsync = async (webSocket: WebSocket): Promise<string | null> => new Promise((resolve) => {\r\n    webSocket.onmessage = (event: MessageEvent) => {\r\n      const message = event.data || '';\r\n      resolve(message);\r\n    };\r\n    webSocket.onerror = () => {\r\n      resolve(null);\r\n    };\r\n  });\r\n\r\n  private onCloseConnectionAsync = async (webSocket: WebSocket): Promise<number | null> => new Promise((resolve) => {\r\n    webSocket.onclose = () => {\r\n      resolve(webSocket.readyState);\r\n    };\r\n    webSocket.onerror = () => {\r\n      resolve(null);\r\n    };\r\n  });\r\n\r\n  createNewPuzzle = async (puzzleLevel: number): Promise<ICreateNewSocketAndPuzzle | null> => {\r\n    try {\r\n\r\n      const webSocket = new WebSocket(this._webSocketUrl);\r\n      const isConnectionStarted = await this.onOpenConnectionAsync(webSocket);\r\n      if (!isConnectionStarted) {\r\n        throw new Error();\r\n      }\r\n\r\n      webSocket.send(`${constants.api.requestNew} ${puzzleLevel}`);\r\n      const newResponse = await this.onRecieveMessageAsync(webSocket);\r\n      if (!newResponse?.startsWith(constants.api.responseNewSuccess)) {\r\n        throw new Error();\r\n      }\r\n\r\n      webSocket.send(constants.api.requestMap);\r\n      const mapResponse = await this.onRecieveMessageAsync(webSocket);\r\n      if (!mapResponse?.startsWith(constants.api.responseMapSuccess)) {\r\n        throw new Error();\r\n      }\r\n      this.rotations={};\r\n      const puzzleData = createPuzzleDataFromMessage(mapResponse);\r\n      const puzzleDataDimension = [puzzleData.length, puzzleData[0].length];\r\n      return {\r\n        puzzleData,\r\n        puzzleDataDimension,\r\n        webSocket,\r\n      };\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  rotatePuzzleCellsOnServer = async (webSocket : WebSocket, rotationQueue:string): Promise<string | null> => {\r\n    try {\r\n      webSocket.send(`${constants.api.requestRotate}${rotationQueue}`);\r\n      let response = await this.onRecieveMessageAsync(webSocket);\r\n      while (!response?.startsWith(constants.api.responseRotateSuccess)) {\r\n        response = await this.onRecieveMessageAsync(webSocket);\r\n      }\r\n      \r\n      this.rotations={};\r\n      return response;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  verifyPuzzleAsync = async (webSocket: WebSocket, puzzleLevel: number): Promise<IVerifyPuzzle | null> => {\r\n    try {\r\n      if(Object.keys(this.rotations).length > 0) {\r\n        const rotationQueue= Object.values(this.rotations).join('').replace('\\n',' ');\r\n        await this.rotatePuzzleCellsOnServer(webSocket, rotationQueue);\r\n      }\r\n      webSocket.send(constants.api.requestVerify);\r\n      const isVerified = await this.onRecieveMessageAsync(webSocket);\r\n\r\n      // is has an error, etc...\r\n      if (!isVerified) {\r\n        throw new Error();\r\n      }\r\n\r\n      // base response, also this is for \"incorrect\"\r\n      let response: IVerifyPuzzle = {\r\n        isCorrect: false,\r\n        isGameOver: false,\r\n        levelPassword: '',\r\n      };\r\n\r\n      // puzzle is over attempt\r\n      if (isVerified?.startsWith(constants.api.responseGameOver)) {\r\n        response = {\r\n          isCorrect: false,\r\n          isGameOver: true,\r\n          levelPassword: '',\r\n        };\r\n      }\r\n\r\n      // puzzle is verified\r\n      if (isVerified?.startsWith(constants.api.responseVerifyIsCorrect)) {\r\n        const password = isVerified.split(constants.api.responsePassword).pop()?.trim() || '';\r\n        setStorageItem(`${constants.localStorageKeyPrefix}${puzzleLevel}`, password);\r\n\r\n        response = {\r\n          isCorrect: true,\r\n          isGameOver: false,\r\n          levelPassword: password,\r\n        };\r\n      }\r\n\r\n      return response;\r\n\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  goToNextLevelAsync = async (webSocket: WebSocket, nextLevel: number): Promise<{ puzzleData: TPuzzleData, puzzleDataDimension: number[] } | null> => {\r\n    try {\r\n\r\n      const nextAvailableLevel = nextLevel > constants.api.maxLevel ? constants.api.maxLevel : nextLevel;\r\n\r\n      webSocket.send(`${constants.api.requestNew} ${nextAvailableLevel}`);\r\n      const newResponse = await this.onRecieveMessageAsync(webSocket);\r\n      if (!newResponse?.startsWith(constants.api.responseNewSuccess)) {\r\n        throw new Error();\r\n      }\r\n\r\n      webSocket.send(constants.api.requestMap);\r\n      const mapResponse = await this.onRecieveMessageAsync(webSocket);\r\n      if (!mapResponse?.startsWith(constants.api.responseMapSuccess)) {\r\n        throw new Error();\r\n      }\r\n\r\n      const puzzleData = createPuzzleDataFromMessage(mapResponse);\r\n      const puzzleDataDimension = [puzzleData.length, puzzleData[0].length];\r\n      return {\r\n        puzzleData,\r\n        puzzleDataDimension\r\n      };\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  closeWebSocketAsync = async (webSocket: WebSocket): Promise<number | null> => {\r\n    try {\r\n      webSocket.close();\r\n      const response = await this.onCloseConnectionAsync(webSocket);\r\n      if (response !== null) {\r\n        return response;\r\n      } else {\r\n        throw new Error();\r\n      }\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n}\r\n\r\nexport type {\r\n  TPuzzleData,\r\n  ICreateNewSocketAndPuzzle,\r\n  IRotatePuzzle,\r\n};\r\nexport { Socket };\r\n\r\n\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { Dispatch, IPuzzleDispatch, IReduxActions, IReduxActionTypes } from 'Redux-Manager/interfaces/puzzle.Interface';\r\nimport { IRotatePuzzle, Socket, TPuzzleData } from 'Services/Socket';\r\nimport { constants } from 'Utils/constants';\r\n\r\n\r\n\r\nconst rdxActionTypes: IReduxActionTypes = {\r\n  PUZZLE_STARTED: 'PUZZLE_STARTED',\r\n  PUZZLE_RETURNED: 'PUZZLE_RETURNED',\r\n  PUZZLE_LOADING: 'PUZZLE_LOADING',\r\n  PUZZLE_FAILED: 'PUZZLE_FAILED',\r\n  PUZZLE_CREATED: 'PUZZLE_CREATED',\r\n  PUZZLE_UPDATED: 'PUZZLE_UPDATED',\r\n  PUZZLE_GAMEOVER: 'PUZZLE_GAMEOVER',\r\n  PUZZLE_VALIDATIONATTEMPTDECREASED: 'PUZZLE_VALIDATIONATTEMPTDECREASED',\r\n  PUZZLE_VERIFYENABLED:'PUZZLE_VERIFYENABLED',\r\n  PUZZLE_NEXTLEVELAVAILABLE: 'PUZZLE_NEXTLEVELAVAILABLE',\r\n  PUZZLE_NEXTLEVELCREATED: 'PUZZLE_NEXTLEVELCREATED',\r\n};\r\n\r\nconst puzzleStarted = createAction<number | undefined>(rdxActionTypes.PUZZLE_STARTED);\r\n\r\nconst puzzleReturned = createAction(rdxActionTypes.PUZZLE_RETURNED);\r\n\r\nconst puzzleLoading = createAction(rdxActionTypes.PUZZLE_LOADING);\r\n\r\nconst puzzleFailed = createAction(rdxActionTypes.PUZZLE_FAILED);\r\n\r\nconst puzzleCreated = createAction(rdxActionTypes.PUZZLE_CREATED, (data: TPuzzleData, puzzleDataDimension: number[], webSocket: WebSocket) => {\r\n  return {\r\n    payload: {\r\n      data,\r\n      puzzleDataDimension,\r\n      webSocket\r\n    }\r\n  };\r\n});\r\n\r\nconst puzzleUpdated = createAction(rdxActionTypes.PUZZLE_UPDATED,(cellY:number, cellX:number)=>{\r\n  return {\r\n    payload: {\r\n      cellY,\r\n      cellX\r\n    }\r\n  };\r\n});\r\n\r\nconst puzzleGameOver = createAction(rdxActionTypes.PUZZLE_GAMEOVER);\r\n\r\nconst puzzleVerifyEnabled = createAction<boolean>(rdxActionTypes.PUZZLE_VERIFYENABLED);\r\nconst puzzleDecreaseValidationAttempt = createAction(rdxActionTypes.PUZZLE_VALIDATIONATTEMPTDECREASED);\r\n\r\nconst puzzleNextLevelAvailability = createAction<string | undefined>(rdxActionTypes.PUZZLE_NEXTLEVELAVAILABLE);\r\n\r\nconst puzzleNextLevelCreated = createAction(rdxActionTypes.PUZZLE_NEXTLEVELCREATED, (puzzleData: TPuzzleData, puzzleDataDimension: number[]) => {\r\n  return {\r\n    payload: {\r\n      puzzleData,\r\n      puzzleDataDimension\r\n    }\r\n  };\r\n});\r\n\r\n\r\nconst rdxReturnToWelcomeAsync = (webSocket: WebSocket | undefined): IPuzzleDispatch => {\r\n  return async (dispatch: Dispatch<IReduxActions>) => {\r\n    try {\r\n      if (webSocket) {\r\n        const response = await new Socket().closeWebSocketAsync(webSocket);\r\n        if (response !== null) {\r\n          dispatch(puzzleReturned());\r\n        } else {\r\n          throw new Error();\r\n        }\r\n      } else {\r\n        dispatch(puzzleReturned());\r\n      }\r\n    } catch (exception) {\r\n      dispatch(puzzleFailed());\r\n    }\r\n  };\r\n};\r\n\r\nconst rdxCreateWebSocketAndPuzzleAsync = (puzzleLevel: number): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\r\n  dispatch(puzzleLoading());\r\n  try {\r\n    const response = await new Socket().createNewPuzzle(puzzleLevel);\r\n    if (response instanceof Object) {\r\n      dispatch(puzzleCreated(response.puzzleData, response.puzzleDataDimension, response.webSocket));\r\n    } else {\r\n      throw new Error();\r\n    }\r\n  } catch (exception) {\r\n    dispatch(puzzleFailed());\r\n  }\r\n};\r\n\r\nconst rdxRotatePuzzleCellOnClient = ({ cellX, cellY }: IRotatePuzzle): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\r\n  try {\r\n    dispatch(puzzleUpdated(cellY, cellX));\r\n  } catch (exception) {\r\n    dispatch(puzzleFailed());\r\n  }\r\n};\r\n\r\nconst rdxRotatePuzzleCellsOnServer = (puzzleWebSocket:WebSocket,rotations:{[key:string]:string}): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\r\n  const rotationQueue = Object.values(rotations).join('').replace('\\n',' ');\r\n  const numberOfRotations= rotationQueue.trim().split('\\n').length;\r\n  if(numberOfRotations === constants.api.syncRotationsWithServerLimit){\r\n    const response = await new Socket().rotatePuzzleCellsOnServer(puzzleWebSocket,rotationQueue);\r\n    if (response === null) {\r\n      dispatch(puzzleFailed());\r\n    } \r\n  }\r\n};\r\n\r\nconst rdxValidateExistingPuzzleAsync = (webSocket: WebSocket, puzzleLevel: number): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\r\n  try {\r\n    dispatch(puzzleVerifyEnabled(false));\r\n    const validation = await new Socket().verifyPuzzleAsync(webSocket, puzzleLevel);\r\n\r\n    // has an error\r\n    if (!validation) {\r\n      throw new Error();\r\n    }\r\n\r\n    // is not correct\r\n    if (!validation.isCorrect) {\r\n      dispatch(puzzleDecreaseValidationAttempt());\r\n    }\r\n\r\n    // is game over\r\n    if (validation.isGameOver) {\r\n      dispatch(puzzleGameOver());\r\n    }\r\n\r\n    // is correct\r\n    if (validation.isCorrect) {\r\n      dispatch(puzzleNextLevelAvailability(validation.levelPassword));\r\n    }\r\n    dispatch(puzzleVerifyEnabled(true));\r\n  } catch (error) {\r\n    dispatch(puzzleFailed());\r\n    dispatch(puzzleVerifyEnabled(true));\r\n  }\r\n};\r\n\r\nconst rdxgoToNextLevelAsync = (webSocket: WebSocket, puzzleLevel: number): IPuzzleDispatch => async (dispatch: Dispatch<IReduxActions>) => {\r\n  dispatch(puzzleLoading());\r\n  try {\r\n    const response = await new Socket().goToNextLevelAsync(webSocket, (puzzleLevel + 1));\r\n    if (response) {\r\n      dispatch(puzzleNextLevelCreated(response.puzzleData, response.puzzleDataDimension));\r\n    } else {\r\n      throw new Error();\r\n    }\r\n  } catch (exception) {\r\n    dispatch(puzzleFailed());\r\n  }\r\n};\r\n\r\n\r\nexport {\r\n  rdxActionTypes,\r\n  rdxReturnToWelcomeAsync,\r\n  rdxCreateWebSocketAndPuzzleAsync,\r\n  rdxRotatePuzzleCellOnClient,\r\n  rdxRotatePuzzleCellsOnServer,\r\n  rdxValidateExistingPuzzleAsync,\r\n  rdxgoToNextLevelAsync,\r\n  puzzleStarted,\r\n  puzzleReturned,\r\n  puzzleLoading,\r\n  puzzleFailed,\r\n  puzzleCreated,\r\n  puzzleUpdated,\r\n  puzzleDecreaseValidationAttempt,\r\n  puzzleGameOver,\r\n  puzzleVerifyEnabled,\r\n  puzzleNextLevelAvailability,\r\n  puzzleNextLevelCreated\r\n};\r\n\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\r\nimport { constants } from 'Utils/constants';\r\nimport { rotateCell } from 'Utils/helpers';\r\nimport { puzzleCreated, puzzleDecreaseValidationAttempt, puzzleFailed, puzzleGameOver, puzzleLoading, puzzleNextLevelAvailability, puzzleNextLevelCreated, puzzleReturned, puzzleStarted, puzzleUpdated, puzzleVerifyEnabled } from '../actions/puzzleActions';\r\n\r\n\r\n\r\nconst puzzleInitialState: IReduxState = {\r\n  puzzleIsWelcome: true,\r\n  puzzleLevel: 1,\r\n  puzzleLevelPassword: '',\r\n  puzzleIsStarted: false,\r\n  puzzleIsOver: false,\r\n  puzzleIsLoading: false,\r\n  puzzleIsError: false,\r\n  puzzleData: [],\r\n  puzzleDataDimension: [0, 0],\r\n  puzzleWebSocket: undefined,\r\n  puzzleRemainingValidationAttempt: constants.api.remainingVerifyAttemptCount,\r\n  puzzleIsNextLevelAvailable: false,\r\n  puzzleVerifyEnable: true,\r\n};\r\n\r\nconst puzzleReducer = createReducer(puzzleInitialState, (builder) => {\r\n  builder\r\n    .addCase(puzzleStarted, (state, action) => {\r\n      state.puzzleIsWelcome = false;\r\n      state.puzzleLevel = (action.payload || puzzleInitialState.puzzleLevel);\r\n    })\r\n    .addCase(puzzleReturned, () => puzzleInitialState)\r\n    .addCase(puzzleLoading, (state,) => {\r\n      state.puzzleIsLoading = true;\r\n      state.puzzleIsError = false;\r\n    })\r\n    .addCase(puzzleFailed, (state,) => {\r\n      state.puzzleIsLoading = false;\r\n      state.puzzleIsError = true;\r\n    })\r\n    .addCase(puzzleCreated, (state, action) => {\r\n      state.puzzleIsStarted = true;\r\n      state.puzzleIsLoading = false;\r\n      state.puzzleIsError = false;\r\n      state.puzzleData = action.payload.data;\r\n      state.puzzleDataDimension = action.payload.puzzleDataDimension;\r\n      state.puzzleWebSocket = action.payload.webSocket;\r\n    })\r\n    .addCase(puzzleUpdated, (state, action) => {\r\n      if(state.puzzleData){\r\n        state.puzzleData[action.payload.cellY][action.payload.cellX] = rotateCell(state.puzzleData[action.payload.cellY][action.payload.cellX]);\r\n      }\r\n    })\r\n    .addCase(puzzleDecreaseValidationAttempt, (state,) => {\r\n      state.puzzleRemainingValidationAttempt = (state.puzzleRemainingValidationAttempt - 1);\r\n    })\r\n    .addCase(puzzleGameOver, (state,) => {\r\n      state.puzzleIsOver = true;\r\n    })\r\n    .addCase(puzzleNextLevelAvailability, (state, action) => {\r\n      state.puzzleIsNextLevelAvailable = true;\r\n      state.puzzleLevelPassword = (action.payload || '');\r\n    })\r\n    .addCase(puzzleVerifyEnabled, (state, action) => {\r\n      state.puzzleVerifyEnable = action.payload;\r\n    })\r\n    .addCase(puzzleNextLevelCreated, (state, action) => {\r\n      state.puzzleIsWelcome = false;\r\n      state.puzzleIsStarted = true;\r\n      state.puzzleIsLoading = false;\r\n      state.puzzleIsNextLevelAvailable = false;\r\n      state.puzzleLevel = (state.puzzleLevel + 1);\r\n      state.puzzleData = action.payload.puzzleData;\r\n      state.puzzleDataDimension = action.payload.puzzleDataDimension;\r\n      state.puzzleRemainingValidationAttempt = puzzleInitialState.puzzleRemainingValidationAttempt;\r\n    });\r\n});\r\n\r\nexport {\r\n  puzzleInitialState,\r\n  puzzleReducer,\r\n};\r\n\r\n","\nimport { puzzleReducer } from 'Redux-Manager/reducers/puzzleReducer';\n\nconst appReducers = {\n  puzzleReducer,\n};\n\nexport { appReducers };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FiFrown as IconGameOver, FiCornerUpLeft as IconReturn } from 'react-icons/fi';\n\nimport { messages } from 'Utils/constants';\nimport { rdxReturnToWelcomeAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction GameOver(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  return (\n    <div className=\"puzzle-game-over\">\n      <IconGameOver className=\"icon game-over-icon\" />\n      <p className=\"message game-over-message\">{messages.text.gameOverMessage}</p>\n      <button type=\"button\" className=\"action-return action-game-over\" onClick={buttonReturnHandler}>\n        <IconReturn className=\"action-return-icon\" />\n        <span>{messages.text.return}</span>\n      </button>\n    </div>\n  );\n}\n\nexport default GameOver;\n","enum EWebSocketReadyState {\n  CONNECTING = 0,\n  OPEN = 1,\n  CLOSING = 2,\n  CLOSED = 3,\n}\n\nconst mapWebSocketReadyState = new Map<number, string>([\n  [EWebSocketReadyState.CONNECTING, `(Socket has been created. The connection is not yet open.)`],\n  [EWebSocketReadyState.OPEN, `(The connection is open and ready to communicate.)`],\n  [EWebSocketReadyState.CLOSING, `(The connection is in the process of closing.)`],\n  [EWebSocketReadyState.CLOSED, `(The connection is closed or couldn't be opened.)`],\n]);\n\nconst getWebSocketReadyStateDesc = (enumeration?: number): string => {\n  if (enumeration !== undefined) {\n    return mapWebSocketReadyState.get(enumeration) || mapWebSocketReadyState.get(EWebSocketReadyState.CLOSED) || '';\n  } else {\n    return '';\n  }\n};\n\nexport {\n  getWebSocketReadyStateDesc,\n  EWebSocketReadyState\n};\n","import { FiCheckCircle as IconValidate, FiFrown as IconGiveUp } from 'react-icons/fi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rdxReturnToWelcomeAsync, rdxValidateExistingPuzzleAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport { messages } from 'Utils/constants';\nimport { getWebSocketReadyStateDesc } from 'Utils/enumerations';\n\n\n\nfunction PuzzleActions(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleRemainingValidationAttempt = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleRemainingValidationAttempt);\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n  const puzzleLevel = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevel);\n  const puzzleVerifyEnable = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleVerifyEnable);\n\n  const buttonValidateHandler = () => {\n    if (puzzleWebSocket) {\n      dispatch(rdxValidateExistingPuzzleAsync(puzzleWebSocket, puzzleLevel));\n    }\n  };\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  return (\n    <div className=\"puzzle-actions\">\n      <span className=\"puzzle-level\">{messages.text.levelPrefix} {puzzleLevel}</span>\n      <div className=\"action-buttons-wrapper\">\n        <button type=\"button\" className=\"action-button\" onClick={buttonReturnHandler}>\n          <IconGiveUp className=\"action-icon\" />\n          <span>{messages.text.giveUp}</span>\n        </button>\n        <button type=\"button\" className=\"action-button action-validate\" onClick={buttonValidateHandler} disabled={!puzzleVerifyEnable}>\n          <IconValidate className=\"action-icon\" />\n          <span>{messages.text.check}</span>\n        </button>\n      </div>\n      <div className=\"info\">\n        <p className=\"info-message\">\n          <span>{messages.text.remainingVerifyAttemptText}</span>\n          <span className=\"count\">{puzzleRemainingValidationAttempt}</span>\n        </p>\n        <p className={`info-connection-state state_${puzzleWebSocket?.readyState || ''}`}>{getWebSocketReadyStateDesc(puzzleWebSocket?.readyState)}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default PuzzleActions;\n","import { useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction PuzzleCell(props:{id:string}): JSX.Element {\n  const [rowIndex,cellIndex]=props.id.split('_');\n  const  data  = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleData[+rowIndex][+cellIndex]);\n  return (\n    <button key={+cellIndex} id={props.id} className={'puzzle-cell'} >{data}</button>\n  );\n}\n\nexport default PuzzleCell;\n","import { CSSProperties } from 'react';\nimport { useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport PuzzleCell from './PuzzleCell';\n\n\nfunction PuzzleRow(props:{rowIndex:number,style:CSSProperties}): JSX.Element {\n\n  const puzzleDataDimension = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleDataDimension);\n\n  const cells = [];\n  for (let cellIndex = 0; cellIndex < puzzleDataDimension[1]; cellIndex++) {\n    cells.push(<PuzzleCell key={`${props.rowIndex}_${cellIndex}`} id={`${props.rowIndex}_${cellIndex}`}></PuzzleCell>);\n  }\n  \n  return (\n    <div key={props.rowIndex} className=\"puzzle-row\" style={props.style}>\n      {cells}\n    </div>\n  );\n}\n\nexport default PuzzleRow;\n","import { CSSProperties, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { List } from 'react-virtualized';\r\nimport { IReduxState } from 'Redux-Manager';\r\nimport { rdxRotatePuzzleCellOnClient, rdxRotatePuzzleCellsOnServer } from 'Redux-Manager/actions/puzzleActions';\r\nimport { Socket } from 'Services/Socket';\r\nimport { constants } from 'Utils/constants';\r\nimport { updateRotationQueue } from 'Utils/helpers';\r\nimport PuzzleRow from './PuzzleRow';\r\n\r\n\r\n\r\nfunction PuzzleBody(): JSX.Element {\r\n  const dispatch = useDispatch();\r\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\r\n  const puzzleDataDimension = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleDataDimension);\r\n  const puzzleRemainingValidationAttempt = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleRemainingValidationAttempt);\r\n  const [stateBounceClassName, setStateBounceClassName] = useState<string>('');\r\n  const socketInstance:Socket= new Socket();\r\n  useEffect(() => {\r\n    if(puzzleRemainingValidationAttempt !== constants.api.remainingVerifyAttemptCount){\r\n      setStateBounceClassName(' puzzle-bounce');\r\n      const toggleClassDelay = setTimeout(() => {\r\n        setStateBounceClassName('');\r\n        clearTimeout(toggleClassDelay);\r\n      }, 600);\r\n    }\r\n  }, [ puzzleRemainingValidationAttempt]);\r\n\r\n  \r\n  const renderRow = ( props:{ key:string, index:number, style:CSSProperties} ) => {\r\n    return (\r\n      <PuzzleRow key={props.key} rowIndex={props.index} style={props.style} ></PuzzleRow>\r\n    );\r\n  };\r\n\r\n  const buttonRotateHandler= (event:React. MouseEvent<HTMLElement>)=>{\r\n    const target = event.target as HTMLTextAreaElement;\r\n    if(target.className==='puzzle-cell'){\r\n      const [cellY,cellX]=target.id.split('_');\r\n      if (puzzleWebSocket) {\r\n        dispatch(rdxRotatePuzzleCellOnClient({ cellX: +cellX, cellY: +cellY }));\r\n        updateRotationQueue(`${cellX} ${cellY}` , socketInstance.rotations);\r\n        dispatch(rdxRotatePuzzleCellsOnServer(puzzleWebSocket,socketInstance.rotations));\r\n      }\r\n    }\r\n  };\r\n\r\n  const height=puzzleDataDimension[0] < 18 ? puzzleDataDimension[0] : 18 ;\r\n  return (\r\n    <div className={`puzzle-body${stateBounceClassName} attempt-${puzzleRemainingValidationAttempt}`} onClick={(event:React. MouseEvent<HTMLElement>)=>buttonRotateHandler(event)}>\r\n      <List\r\n        width={puzzleDataDimension[1]*40}\r\n        height={height*40}\r\n        rowRenderer={renderRow}\r\n        rowCount={puzzleDataDimension[0]}\r\n        rowHeight={40}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PuzzleBody;\r\n","import { FiAlertCircle as IconFailure, FiCornerUpLeft as IconReturn } from 'react-icons/fi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rdxReturnToWelcomeAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport { messages } from 'Utils/constants';\n\n\nfunction PuzzleError(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  return (\n    <div className=\"puzzle puzzle-error\">\n      <IconFailure className=\"icon error-icon\" />\n      <p className=\"message error-message\">{messages.text.connectionError}</p>\n      <button type=\"button\" className=\"action-return\" onClick={buttonReturnHandler}>\n        <IconReturn className=\"action-return-icon\" />\n        <span>{messages.text.return}</span>\n      </button>\n    </div>\n  );\n}\n\nexport default PuzzleError;\n","import { FiRotateCw as IconLoading } from 'react-icons/fi';\nimport { messages } from 'Utils/constants';\n\n\nfunction PuzzleLoading(): JSX.Element {\n  return (\n    <div className=\"puzzle puzzle-loading\">\n      <IconLoading className=\"icon loading-icon\" />\n      <p className=\"message loading-message\">{messages.text.loading}</p>\n    </div>\n  );\n}\n\nexport default PuzzleLoading;\n","import { FiArrowRightCircle as IconNextLevel, FiCornerUpLeft as IconReturn, FiGift as IconWellDone } from 'react-icons/fi';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rdxgoToNextLevelAsync, rdxReturnToWelcomeAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\nimport { constants, messages } from 'Utils/constants';\n\n\nfunction PuzzleNextLevel(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleWebSocket = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleWebSocket);\n  const puzzleLevelPassword = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevelPassword);\n  const puzzleLevel = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevel);\n\n  const buttonReturnHandler = () => {\n    dispatch(rdxReturnToWelcomeAsync(puzzleWebSocket));\n  };\n\n  const buttonNextLevelHandler = () => {\n    if (puzzleWebSocket) {\n      dispatch(rdxgoToNextLevelAsync(puzzleWebSocket, puzzleLevel));\n    }\n  };\n\n  return (\n    <div className=\"puzzle-actions\">\n      <div className=\"winner\">\n        <IconWellDone className=\"icon winner-icon\" />\n        <p className=\"winner-message\">\n          <span>{messages.text.achievemessage}</span>\n          <span className=\"message-highlight\">{puzzleLevelPassword}</span>\n        </p>\n      </div>\n      <div className=\"action-buttons-wrapper\">\n        <button type=\"button\" className=\"action-button\" onClick={buttonReturnHandler}>\n          <IconReturn className=\"action-icon\" />\n          <span>{messages.text.return}</span>\n        </button>\n        {puzzleLevel < constants.api.maxLevel &&\n          <button type=\"button\" className=\"action-button action-next\" onClick={buttonNextLevelHandler}>\n            <IconNextLevel className=\"action-icon\" />\n            <span>{messages.text.nextLevel}</span>\n          </button>\n        }\n        {puzzleLevel >= constants.api.maxLevel &&\n          <p className=\"level-finish\">{messages.text.gameFinishedMessage}</p>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default PuzzleNextLevel;\n","import 'Components/game/Game.scss';\nimport GameOver from 'Components/game/partials/GameOver';\nimport PuzzleActions from 'Components/game/partials/PuzzleActions';\nimport PuzzleBody from 'Components/game/partials/PuzzleBody';\nimport PuzzleError from 'Components/game/partials/PuzzleError';\nimport PuzzleLoading from 'Components/game/partials/PuzzleLoading';\nimport PuzzleNextLevel from 'Components/game/partials/PuzzleNextLevel';\nimport { useLayoutEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rdxCreateWebSocketAndPuzzleAsync } from 'Redux-Manager/actions/puzzleActions';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\n\n\n\nfunction Game(): JSX.Element {\n  const dispatch = useDispatch();\n  const puzzleLevel = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleLevel);\n  const puzzleIsStarted = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsStarted);\n  const puzzleIsLoading = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsLoading);\n  const puzzleIsError = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsError);\n  const puzzleIsOver = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsOver);\n  const puzzleIsNextLevelAvailable = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsNextLevelAvailable);\n\n\n  useLayoutEffect(() => {\n    if (!puzzleIsStarted) {\n      dispatch(rdxCreateWebSocketAndPuzzleAsync(puzzleLevel));\n    }\n  }, [dispatch, puzzleIsStarted, puzzleLevel]);\n\n\n  if (puzzleIsLoading) {\n    return <PuzzleLoading />;\n  }\n\n  if (puzzleIsError) {\n    return <PuzzleError />;\n  }\n\n  return (\n    <div className={`puzzle${puzzleIsNextLevelAvailable ? ' puzzle-success' : ''}${puzzleIsOver ? ' puzzle-failed' : ''}`}>\n      {puzzleIsOver && <GameOver />}\n      {(!puzzleIsOver && !puzzleIsNextLevelAvailable) && <PuzzleActions />}\n      {puzzleIsNextLevelAvailable && <PuzzleNextLevel />}\n      <PuzzleBody />\n    </div>\n  );\n}\n\nexport default Game;\n","import { messages } from 'Utils/constants';\r\nimport './Footer.scss';\r\n\r\nfunction Footer(): JSX.Element {\r\n  return (\r\n    <footer className='footer'>\r\n      <div className='footer-container'>\r\n        <div className='copyright'>\r\n          <p className='copyright-text'>\r\n            &copy; {new Date().getFullYear()} {messages.app.title}.{' '}\r\n            {messages.text.copyright}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import 'Components/layout/header/Header.scss';\nimport { messages } from 'Utils/constants';\n\nfunction Header(): JSX.Element {\n  return (\n    <header className='header'>\n      <div className='container'>\n        <div className='logo'>\n          <svg className='logo-image' width='100' height='100' viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg' >\n            <path fill='#ff8600' d='M212.125 20.156V59.72H39.53V188.56H69.846V293H39.623V483.03H204.687v-12.936H382v-45.5h95.281V264.53h-25.655V74.813H384.03V20.157H212.126zm18.688 18.688h134.53l-.03 35.968H297V153.938H378.28v46.625h18.69V135.25h-81.283V93.5h117.25v171.03H342V201.47H224.656v9.343l-.03 70.187v9.344h75.467v-18.688h-56.75v-51.5h79.97l-.002 126.78-185.937-.03V252.72h41.656v53.686h18.72V174.062h66.875v-18.687h-85.563v78.654h-60.375V293H88.53V188.562h57.44v-18.687H58.22v-91.47h153.905v30.94H111.437v18.686h119.375V38.845zM342 283.22h116.594v122.686H301.97v18.688h61.31v26.812H204.69v-48.812H110v18.687h76v43.064H58.312V311.72h60.376v53.874h9.343l114.782.03v65H261.5v-65H342v-31.529h66.75v33.844h18.688V315.406H342V283.22z' />\n          </svg>\n          <h1 className='logo-text'>{messages.app.title}</h1>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import 'Components/layout/Layout.scss';\nimport Footer from './footer/Footer';\nimport Header from './header/Header';\n\ntype TChildren =\n  | React.ReactNode\n  | JSX.Element\n  | JSX.Element[]\n  | string\n  | string[]\n  | React.ReactChild\n  | React.ReactChild[];\n\ninterface ILayout {\n  children?: TChildren;\n}\n\nfunction Layout({ children }: ILayout): JSX.Element {\n  return (\n    <>\n      <Header />\n      <main className='layout'>\n        <div className='layout-container'>\n          <div className='layout-content'>{children}</div>\n        </div>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default Layout;\n","import 'Components/welcome/Welcome.scss';\nimport { FcKey } from 'react-icons/fc';\nimport { FiHelpCircle as IconPassword } from 'react-icons/fi';\nimport { HiLockClosed as IconLock } from 'react-icons/hi';\nimport { useDispatch } from 'react-redux';\nimport { puzzleStarted } from 'Redux-Manager/actions/puzzleActions';\nimport { constants, messages } from 'Utils/constants';\nimport { getStorageItem } from 'Utils/helpers';\n\nfunction Welcome(): JSX.Element {\n  const dispatch = useDispatch();\n\n  const buttonStartHandler = (puzzleLevel: number): void => {\n    dispatch(puzzleStarted(puzzleLevel));\n  };\n\n  return (\n    <div className='welcome'>\n      <div className='welcome-container'>\n        <h1 className='welcome-title'>{messages.text.welcomeTitle}</h1>\n        <p className='welcome-description'>{messages.text.welcomeDescription}</p>\n      </div>\n\n      <div className='levels-container'>\n        <div className='level header-row'>\n          <div className='level-title'>{messages.text.levelPrefix}</div>\n          <div className='password-title'>\n            <FcKey className='password-icon' />\n          </div>\n        </div>\n\n        {Object.entries(constants.localStorageKeys).map(\n          ([, localKeyValue], localKeyIndex) => {\n            const levelPassword = getStorageItem(localKeyValue);\n            const prevLevelHasAchieved = getStorageItem(`${constants.localStorageKeyPrefix}${localKeyIndex}`);\n            const levelCanPlay = localKeyIndex === 0 || prevLevelHasAchieved;\n            const puzzleLevel = localKeyIndex + 1;\n            let levelDescription='';\n            Object.entries(messages.levelDescriptions).some((item) => {\n              if(item[0] === `level_${puzzleLevel}`){\n                levelDescription=item[1];\n                return true ;\n              }\n            });\n            return (\n              <div key={localKeyIndex} className={`level ${ levelCanPlay && levelPassword && 'level-success'}`}>\n                <div className='level-info level-image'>\n                  <button type='button' className={`play-button ${ levelCanPlay ? '' : 'disable'}`} onClick={ levelCanPlay ? () => buttonStartHandler(puzzleLevel) : undefined} >\n                    {!levelCanPlay && <IconLock className='lock-icon' />}\n                    <img src={process.env.PUBLIC_URL + `/Level_${puzzleLevel}.PNG`} className='play-button-image' />\n                  </button>\n                </div>\n                <div className={`level-info level-label ${!levelCanPlay ? 'level-locked' : '' }`} >\n                  <span className='level-description'>{levelDescription}</span>\n                </div>\n                <div className='level-info level-password'>\n                  { (levelCanPlay && levelPassword) || (<IconPassword className='password-placeholder-icon' />) }\n                </div>\n              </div>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Welcome;\n","\n\nimport Game from 'Components/game/Game';\nimport Layout from 'Components/layout/Layout';\nimport Welcome from 'Components/welcome/Welcome';\nimport { useSelector } from 'react-redux';\nimport { IReduxState } from 'Redux-Manager/interfaces/puzzle.Interface';\n\nfunction App(): JSX.Element {\n  const puzzleIsWelcome = useSelector((state:IReduxState)=>state.puzzleReducer.puzzleIsWelcome);\n\n  return (\n    <Layout>\n      {puzzleIsWelcome && <Welcome />}\n      {!puzzleIsWelcome && <Game />}\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'Styles/reset-styles.scss';\nimport { appReducers } from 'Redux-Manager/reducers';\nimport App from 'App';\nimport { configureStore } from '@reduxjs/toolkit';\n\nconst PipesPuzzleGameApp = () => {\n  const store =configureStore({\n    reducer:appReducers,\n    devTools:process.env.NODE_ENV !== 'production',\n    middleware: (getDefaultMiddleware) => {\n      return getDefaultMiddleware({\n        serializableCheck: {\n          // Ignore these action types\n          ignoredActions: ['PUZZLE_CREATED','PUZZLE_Updated'],\n          // Ignore these paths in the state\n          ignoredPaths: ['puzzleReducer.puzzleWebSocket'],\n        },\n      });\n    }\n  });\n  \n  return (\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  );\n};\n\nconst pipePuzzleRootElement = window.document.getElementById('PipesPuzzleGameApp');\nif (pipePuzzleRootElement?.hasChildNodes()) {\n  hydrate(<PipesPuzzleGameApp />, pipePuzzleRootElement);\n} else {\n  render(<PipesPuzzleGameApp />, pipePuzzleRootElement);\n}\n"],"sourceRoot":""}